목적 : 안드로이드 어플리케이션의 DB 접근에 사용할 서버
서버 작성 기준 : 클라이언트에서 Action을 필요로 하는 경우

-- 규칙

* 프로토콜 : HTTP
* 요청 메소드 : POST
* 데이터 통신 방식 : JSON
* DBMS : MySQL

-- 클라이언트

1. URLConnection으로 POST 요청
2. 서버에 원하는 요청은 Header의 command로 설정
3. 요청하는 데이터는 JSON 형식

* Header?
-> com.dms.planb.core.DmsVerticle 참조

* 커맨드?
-> com.dms.planb.support.Commands 참조

-- 서버

1. Vert.x 프레임워크의 HttpServer 사용
2. Verticle에서 커맨드와 데이터를 받은 후, com.dms.planb.support.ActionPerformer로 분기
3. 커맨드에 따라 com.dms.planb.action의 ***Action 클래스로 분기

-- 패키지 설명

com.dms.boxfox.database : MySQL JDBC 사용, executeQuery와 executeUpdate, queryBuilder 지원
* queryBuilder?
-> StringBuilder를 통해 쿼리를 만들기 위한 가변인자 메소드. 사용 예는 com.dms.planb.action.InsertAction 참조

com.dms.boxfox.logging : 

com.dms.planb.action : 추상클래스 Actionable을 구현하여 Insert, Update, Delete, Select의 행동을 하는 패키지

com.dms.planb.core : main() 메소드와 서버 Verticle이 위치하는 곳

com.dms.planb.support : 상수 형태의 커맨드 리스트를 가진 클래스(Commands), 커맨드를 분석하고 action으로 분기하는 클래스(ActionPerformer)가 있음

-- 분기 순서

com.dms.planb.core.DmsMain -> vertx.deployVerticle(new DmsVerticle())
-> com.dms.planb.core.DmsVerticle -> ActionPerformer.perform(command, requestObject)
-> com.dms.planb.support.ActionPerformer -> action.action(command, requestObject) * com.dms.planb.support.Commands 참조

-> com.dms.planb.action.***Action -> return responseObject;

-> com.dms.planb.support.ActionPerformer -> return action.action(command, requestObject)
-> com.dms.planb.core.DmsVerticle -> response.close()
-> 종료